import pathlib
from pathlib import Path
from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import Message
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.markdown import bold

from main import dp
from keyboards import inline_kb_continue, inline_kb_start, inline_btn_back_edit, inline_kb_back_edit, \
    inline_kb_date, inline_kb_time, inline_kb_cancel, inline_kb_back, inline_kb_no_res, inline_kb_edit
from sql import *

logo_path = Path(pathlib.Path.home(), 'RTUCinemaBot', 'RTUCinemaBot', 'CinemaBotLogo.png')


# FSM
class FSMUserInfo(StatesGroup):
    full_name = State()
    room = State()
    phone_number = State()


class FSMBooking(StatesGroup):
    date = State()
    time = State()
    list = State()


class FSMEdit(StatesGroup):
    name = State()
    room = State()
    phone = State()


# Start of programme
@dp.message_handler(commands=['start'])
async def cmd_start(message: Message):
    if await check_user(message.from_user.id):
        user_info = await get_user_info(message.from_user.id)
        await message.answer_photo(photo=types.InputFile(logo_path),
                                   caption=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{(user_info['name'])}</b>\n"
                                           f"üè† –ö–æ–º–Ω–∞—Ç–∞: <b>{(user_info['room'])}</b>\n"
                                           f"‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{(user_info['phone_number'])}</b>",
                                   parse_mode=types.ParseMode.HTML,
                                   reply_markup=inline_kb_start)
    else:
        greetings = f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!
        
–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∫–∏–Ω–æ–∑–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –º—É—Å–æ—Ä–∏—Ç—å 
2. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∫—É—Ä–∏—Ç—å –∏ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –∞–ª–∫–æ–≥–æ–ª—å 
3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞
4. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –º–µ–±–µ–ª—å –æ–±—Ä–∞—Ç–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —à—Ç–∞—Ç–Ω–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ
5. –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å—é –∞–ø–ø–∞—Ä–∞—Ç—É—Ä—É –∏ —Å–≤–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞
6. –ü–µ—Ä–µ–¥ —É—Ö–æ–¥–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ª –∑–∞–∫—Ä—ã—Ç

–í–Ω–∏–º–∞–Ω–∏–µ! –í –∫–∏–Ω–æ–∑–∞–ª–µ –≤–µ–¥–µ—Ç—Å—è –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ!
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–±–ª—é–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞

–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" """
        await message.answer(text=greetings, reply_markup=inline_kb_continue)


# Reverse button
@dp.callback_query_handler(text='back_start')
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    user_info = await get_user_info(callback.from_user.id)
    await callback.message.edit_caption(caption=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{(user_info['name'])}</b>\n"
                                                f"üè† –ö–æ–º–Ω–∞—Ç–∞: <b>{(user_info['room'])}</b>\n"
                                                f"‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{(user_info['phone_number'])}</b>",
                                        parse_mode=types.ParseMode.HTML,
                                        reply_markup=inline_kb_start)
    await callback.answer()


@dp.callback_query_handler(Text("–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"))
async def cmd_check_res(callback: types.CallbackQuery):
    if await check_reservation(callback.from_user.id):
        reservations = await get_reservation(callback.from_user.id)
        await callback.message.edit_caption(caption=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{(reservations['name'])}</b>\n"
                                                    f"üìÖ –î–∞—Ç–∞: <b>{(reservations['date'])}</b>\n"
                                                    f"üïí –í—Ä–µ–º—è: <b>{(reservations['time'])}</b>\n"
                                                    f"üëØ –°–ø–∏—Å–æ–∫ –ª—é–¥–µ–π: <b>{(reservations['companions'])}</b>",
                                            parse_mode=types.ParseMode.HTML,
                                            reply_markup=inline_kb_back)
    else:
        await callback.message.edit_caption(caption="–£ –í–∞—Å —Å–µ–π—á–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                                            reply_markup=inline_kb_no_res)
    await callback.answer()


@dp.callback_query_handler(Text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"))
async def cmd_edit_user(callback: types.CallbackQuery):
    user_info = await get_user_info(callback.from_user.id)
    await callback.message.edit_caption(caption=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{(user_info['name'])}</b>\n"
                                                f"üè† –ö–æ–º–Ω–∞—Ç–∞: <b>{(user_info['room'])}</b>\n"
                                                f"‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{(user_info['phone_number'])}</b>\n\n"
                                                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üëá",
                                        parse_mode=types.ParseMode.HTML,
                                        reply_markup=inline_kb_edit)
    await callback.answer()


@dp.callback_query_handler(text_startswith="edit_")
async def cmd_edit(callback: types.CallbackQuery):
    if callback.data.replace('edit_', '') == "name":
        await FSMEdit.name.set()
        await callback.message.edit_caption(caption="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û", reply_markup=inline_kb_back_edit)
    if callback.data.replace('edit_', '') == "room":
        await FSMEdit.room.set()
        await callback.message.edit_caption(caption="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã", reply_markup=inline_kb_back_edit)
    if callback.data.replace('edit_', '') == "phone":
        await FSMEdit.phone.set()
        await callback.message.edit_caption(caption="–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                            reply_markup=inline_kb_back_edit)
    await callback.answer()


@dp.callback_query_handler(text='back_edit', state="*")
async def edit_finish(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await cmd_edit_user(callback)
    await callback.answer()


# @dp.callback_query_handler(text='back_book', state="*")
# async def back_book(callback: types.CallbackQuery, state: FSMContext):
#     await FSMBooking.previous()
#     await callback.answer()


@dp.message_handler(state=FSMEdit.name)
async def edit_full_name(message: Message, state: FSMContext):
    await edit_name(message.from_user.id, message.text.strip())
    await message.answer(text="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ")
    await cmd_start(message)
    await state.finish()


@dp.message_handler(state=FSMEdit.room)
async def edit_room(message: Message, state: FSMContext):
    await edit_room(message.from_user.id, message.text.strip())
    await message.answer(text="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ")
    await cmd_start(message)
    await state.finish()


@dp.message_handler(state=FSMEdit.phone)
async def edit_phone_num(message: Message, state: FSMContext):
    await edit_phone(message.from_user.id, message.text.strip())
    await message.answer(text="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ")
    await cmd_start(message)
    await state.finish()



# Add user to db
@dp.callback_query_handler(Text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
async def cmd_add_user(callback: types.CallbackQuery):
    await FSMUserInfo.full_name.set()
    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û")
    await callback.answer()


@dp.message_handler(state=FSMUserInfo.full_name)
async def set_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ –∏ –∫–æ–º–Ω–∞—Ç—ã")
    await FSMUserInfo.next()


@dp.message_handler(state=FSMUserInfo.room)
async def set_room(message: Message, state: FSMContext):
    await state.update_data(room=message.text.strip().replace(' ', '/').replace('\\', '/'))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await FSMUserInfo.next()


@dp.message_handler(state=FSMUserInfo.phone_number)
async def set_phone_number(message: Message, state: FSMContext):
    await state.update_data(phone_number=message.text.strip())
    data = await state.get_data()
    await add_user(message.from_user.id, message.from_user.username, data['full_name'], data['room'],
                   data['phone_number'])
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ")
    await cmd_start(message)
    await state.finish()


# Add record to db
@dp.callback_query_handler(Text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –≤ –∫–∏–Ω–æ–∑–∞–ª–µ"))
async def cmd_book(callback: types.CallbackQuery):
    if await check_reservation(callback.from_user.id):
        reservations = await get_reservation(callback.from_user.id)
        await callback.message.edit_caption(caption="–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–¥–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
                                                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{(reservations['name'])}</b>\n"
                                                    f"üìÖ –î–∞—Ç–∞: <b>{(reservations['date'])}</b>\n"
                                                    f"üïí –í—Ä–µ–º—è: <b>{(reservations['time'])}</b>\n"
                                                    f"üëØ –°–ø–∏—Å–æ–∫ –ª—é–¥–µ–π: <b>{(reservations['companions'])}</b>",
                                            parse_mode=types.ParseMode.HTML,
                                            reply_markup=inline_kb_back)
    else:
        await FSMBooking.date.set()
        await callback.message.edit_caption(
            caption="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É üëá", reply_markup=inline_kb_date)
        await callback.answer()


@dp.callback_query_handler(text_startswith='date_', state=FSMBooking.date)
async def set_date(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(date=callback.data)
    await callback.message.edit_caption(
        caption="üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è üëá", reply_markup=inline_kb_time)
    await FSMBooking.next()
    await callback.answer()


@dp.callback_query_handler(text_startswith='time_', state=FSMBooking.time)
async def set_time(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(time=callback.data)
    await callback.message.edit_caption("üëØ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª—é–¥–µ–π,"
                                        " –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç —Å –í–∞–º–∏ –≤ –∫–∏–Ω–æ–∑–∞–ª")
    await FSMBooking.next()
    await callback.answer()


@dp.message_handler(state=FSMBooking.list)
async def set_list(message: Message, state: FSMContext):
    await state.update_data(list=message.text)
    data = await state.get_data()
    await add_record(message.from_user.id, await get_full_name(message.from_user.id), data['date'].replace('date_', ''),
                     data['time'].replace('time_', ''), data['list'])
    await message.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ")
    await cmd_start(message)
    await state.finish()
